// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using koishowweb;

#nullable disable

namespace koishowweb.Migrations
{
    [DbContext(typeof(DbContextKoi))]
    [Migration("20230509180039_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("koishowweb.Models.Sensor", b =>
                {
                    b.Property<string>("SensorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Offset")
                        .HasColumnType("float");

                    b.Property<string>("SensorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VatId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SensorId");

                    b.HasIndex("VatId");

                    b.ToTable("Sensor");
                });

            modelBuilder.Entity("koishowweb.Models.Temperatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SensorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Temperatur")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("Temperature");
                });

            modelBuilder.Entity("koishowweb.Models.Vat", b =>
                {
                    b.Property<string>("VatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Capacity")
                        .HasColumnType("float");

                    b.Property<double>("RequestedTemperature")
                        .HasColumnType("float");

                    b.Property<string>("VatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VatId");

                    b.ToTable("Vat");
                });

            modelBuilder.Entity("koishowweb.Models.Sensor", b =>
                {
                    b.HasOne("koishowweb.Models.Vat", "Vat")
                        .WithMany()
                        .HasForeignKey("VatId");

                    b.Navigation("Vat");
                });

            modelBuilder.Entity("koishowweb.Models.Temperatures", b =>
                {
                    b.HasOne("koishowweb.Models.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });
#pragma warning restore 612, 618
        }
    }
}
